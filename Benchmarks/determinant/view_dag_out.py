#
# VIEW DAG_OUT
#
# a utility to view the adjacency matricies that is output from solving the determinant problem
# particularly the map file generated by the script and the dag_out solutions file are generated by dagster are input into the program and the resulting formatted adjacency matricies are 
# produced to stdout
#
# the CNF generator script will generate a map file like the following:
# 
# $ cat map.txt
# >>> m_0_0 1
# >>> m_0_1 2
# >>> m_0_2 3
# >>> m_0_3 4
# >>> ....
# >>> m_5_3 34
# >>> m_5_4 35
# >>> m_5_5 36
# >>> 
# >>> ....
#
# which the this script will read to pull out the dimension of the graphs which it expects to see (in this case graphs with 5 vertices, 5x5 adjacency matricies)
# and a dag_out file with one solution per line, eg:
#
# $ cat dag_out.txt
# >>> -1 -2 -3 4 -5 -6 -7 -8 -9 -10 11 -12 -13 -14 -15 -16 -17 18 19 -20 -21 -22 -23 24 -25 26 -27 -28 -29 30 -31 -32 33 34 35 -36 
# >>> -1 -2 -3 -4 5 -6 -7 -8 -9 10 11 -12 -13 -14 -15 -16 -17 18 -19 20 -21 -22 -23 24 25 26 -27 -28 -29 30 -31 -32 33 34 35 -36 
# >>> -1 -2 -3 4 -5 -6 -7 -8 -9 -10 11 -12 -13 -14 -15 -16 -17 18 19 -20 -21 -22 23 24 -25 26 -27 28 -29 30 -31 -32 33 34 35 -36 
# >>> ....
#
# the program will output the adjacency matricies corresponding to thoes solutions



import click


@click.command()
@click.argument('map_file', type=click.File('r'))
@click.argument('dag_out', type=click.File('r'))
def view_dag_out(map_file, dag_out):
	lines = map_file.readlines()
	map_file.close()
	map_file = [l.strip().split(" ") for l in lines]
	map_file = [[l[0],int(l[1])] for l in map_file if l[0][0:2]=="m_"]
	map_file = {l[1]:l[0] for l in map_file}

	N = 0
	for k in map_file.values():
		kk = k.split("_")
		k1 = int(kk[1])
		k2 = int(kk[2])
		if k1>N:
			N = k1
		if k2>N:
			N = k2
	N += 1
	print("detected N of {}".format(N))

	lines = dag_out.readlines()
	dag_out.close()
	
	lines = [l.strip().split(" ") for l in lines]
	solutions = []
	for s in lines:
		sol = [map_file[int(ss)] for ss in s if int(ss)>0 and int(ss) in map_file.keys()]
		if sol not in solutions:
			solutions.append(sol)
	solutions = sorted(solutions)

	for i,sol in enumerate(solutions):
		print("")
		#print(lines[i])
		for y in range(N):
			for x in range(N):
				if "m_{}_{}".format(x,y) in sol:
					print("1 ",end="")
				else:
					print("0 ",end="")
			print("")


if __name__ == '__main__':
    view_dag_out()
