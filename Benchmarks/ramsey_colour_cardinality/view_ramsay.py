import click
import re
import math

width = 200
radius = 80
text_radius = 90
header = '<svg height="{0}" width="{0}"><rect width="{0}" height="{0}" style="fill:rgb(255,255,255)" />'.format(width)
tail = '</svg>'
colours = [(255,0,0),(0,255,0),(0,0,255),(0,0,0),(255,255,0),(255,0,255),(0,255,255),(128,128,128)]

'''
 Pass in the Map file generated by the Ramsay program.
 and the solution to the problem output by minisat
 and a desired name of the output SVG file
 
 The program will read the solution, match it against the MAP, and output the coloured clique (upto 8 colours) to the SVG for viewing
'''
@click.command()
@click.argument('map_file', type=click.File('r'))
@click.argument('solution_file', type=click.File('r'))
@click.argument('output_svg', type=click.File('w'))
def view_ramsay(map_file, solution_file,output_svg):

	# load in the MAP, detecting edge colour keys, and max_vertex info
	pattern = re.compile(r"MAPPING: (\d+) -> v(\d+) x v(\d+) = c(\d+)")
	map_variables = {}
	max_variable = 0
	for line in map_file.readlines():
		line = line.strip()
		for match in pattern.finditer(line):
			var = int(match.groups()[0])
			v1 = int(match.groups()[1])
			v2 = int(match.groups()[2])
			c = int(match.groups()[3])
			map_variables[var] = (v1,v2,c)
			if max(v1,v2)>max_variable:
				max_variable=max(v1,v2)
	
	# load in the solution
	sol_string = solution_file.readlines()[1]
	sol = [int(a) for a in sol_string.split(" ")]
	
	# map the true solution variables against the vertex info loaded in from the MAP file
	true_variables = []
	for s in sol:
		if s>0:
			if s in map_variables.keys():
				true_variables.append(map_variables[s])
	
	# output vertex labels in the SVG
	output_svg.write(header)
	for i in range(max_variable+1):
		radians = 2*math.pi*i*1.0/(max_variable+1)
		output_svg.write('<text x="{}" y="{}" fill="black" dominant-baseline="middle" text-anchor="middle">{}</text>'.format(width/2+text_radius*math.cos(radians),width/2+text_radius*math.sin(radians),i))

	# output coloured edges in the SVG
	for v1,v2,c in true_variables:
		r1 = 2*math.pi*v1*1.0/(max_variable+1)
		r2 = 2*math.pi*v2*1.0/(max_variable+1)
		x1 = width/2 + radius*math.cos(r1)
		y1 = width/2 + radius*math.sin(r1)
		x2 = width/2 + radius*math.cos(r2)
		y2 = width/2 + radius*math.sin(r2)
		colour = colours[c]
		output_svg.write('<line x1="{}" y1="{}" x2="{}" y2="{}" style="stroke:rgb{};stroke-width:2" />'.format(x1,y1,x2,y2,colour))
	
	# append the SVG tail, and done
	output_svg.write(tail)
	
	
if __name__ == '__main__':
    view_ramsay()
